/*
94. Binary Tree Inorder Traversal
Given the root of a binary tree, return the inorder traversal of its nodes' values.
Example 1:

Input: root = [1,null,2,3]

Output: [1,3,2]

Explanation:
                      1
                        \
                          2
                         / 
                       3  



Example 2:

Input: root = [1,2,3,4,5,null,8,null,null,6,7,9]

Output: [4,2,6,5,7,1,3,9,8]

Explanation:
                      1
                    /   \
                  2       3
                 / \       \
                4   5       8 
                   / \      /
                  6   7    9

Example 3:

Input: root = []

Output: []

Example 4:

Input: root = [1]

Output: [1]

Constraints:

The number of nodes in the tree is in the range [0, 100].
-100 <= Node.val <= 100
*/
class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int>v;
        tree(root, v);
        return v;
        
    }
    void tree(TreeNode* &root,vector<int>&v){
        if(root==NULL){
            return;}

            tree(root->left,v);
            v.push_back(root->val);
            tree(root->right,v);
        } 
};
